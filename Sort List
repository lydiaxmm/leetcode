Sort a linked list in O(n log n) time using constant space complexity.

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode slow=head, fast=head;
        while(fast.next!=null&&fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        fast=slow.next;
        slow.next=null;
        slow=sortList(head);
        fast=sortList(fast);
        return mergeList(slow,fast);
    }
    public ListNode mergeList(ListNode slow, ListNode fast)
    {
        ListNode head=new ListNode(0);
        ListNode cur=head;
        while(slow!=null&&fast!=null)
        {
            if(slow.val<fast.val)
            {
                cur.next=slow;
                slow=slow.next;
            }
            else
            {
                cur.next=fast;
                fast=fast.next;
            }
            cur=cur.next;
        }
        if(slow!=null) cur.next=slow;
        else if(fast!=null) cur.next=fast;
        return head.next;
    }
}
