Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list. 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head==null||m==n) return head;
        ListNode mNode=head;
        ListNode nNode=head;
        ListNode prev=new ListNode(0);
        prev.next=head;
        for(int i=0;i<n-m;i++) nNode=nNode.next;
        for(int i=0;i<m-1;i++)
        {
            prev=mNode;
            mNode=mNode.next;
            nNode=nNode.next;
        }
        boolean fromHead=false;
        if(mNode==head) fromHead=true;
        while(mNode!=nNode)
        {
            ListNode tmp=nNode.next;
            nNode.next=mNode;
            prev.next=mNode.next;
            mNode.next=tmp;
            mNode=prev.next;
        }
        if(fromHead) return nNode;
        return head;
    }
}
