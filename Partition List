Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5. 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode before=new ListNode(0);
        ListNode after=new ListNode(0);
        ListNode first=before,second=after,begin=head;
        while(begin!=null)
        {
            if(begin.val<x)
            {
                first.next=begin;
                first=first.next;
            }
            else
            {
                second.next=begin;
                second=second.next;
            }
            begin=begin.next;
        }
        second.next=null;
        first.next=after.next;
        return before.next;
    }
}
